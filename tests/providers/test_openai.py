from unittest.mock import patch

from openai.openai_object import OpenAIObject

from amora.ai import SQLPromptAnswer
from amora.providers.openai import sql_translate


def test_sql_translate():
    response_ms = 100
    completion = OpenAIObject.construct_from(
        {
            # completion
            "choices": [
                {
                    "finish_reason": "stop",
                    "index": 0,
                    "logprobs": None,
                    "text": "MAX(value) FROM `heart_rate` WHERE DATE(creationDate) = CURRENT_DATE()",
                }
            ],
            # observability
            "id": "cmpl-6wsscZeCtAxXjXgleE2xjbdAh7iIe",
            "usage": {
                "completion_tokens": 100,
                "prompt_tokens": 35,
                "total_tokens": 135,
            },
        },
        response_ms=response_ms,
    )
    question = "What is the maximum heart rate observed today?"
    context = """# amora-data-build-tool.amora.steps(id INTEGER,sourceName STRING,unit STRING,value FLOAT,device STRING,creationDate TIMESTAMP,startDate TIMESTAMP,endDate TIMESTAMP)
# amora-data-build-tool.amora.heart_rate_agg(year INTEGER,month INTEGER)
# amora-data-build-tool.amora.health(id INTEGER,type STRING,sourceName STRING,sourceVersion STRING,unit STRING,value FLOAT,device STRING,creationDate TIMESTAMP,startDate TIMESTAMP,endDate TIMESTAMP)
# amora-data-build-tool.amora.step_count_by_source(value_avg FLOAT,value_sum FLOAT,value_count INTEGER,source_name STRING,event_timestamp TIMESTAMP)
# amora-data-build-tool.amora.heart_rate_over100(unit STRING,value FLOAT,creationDate TIMESTAMP,id INTEGER)
# amora-data-build-tool.amora.heart_rate(id INTEGER,sourceName STRING,unit STRING,value FLOAT,device STRING,creationDate TIMESTAMP,startDate TIMESTAMP,endDate TIMESTAMP)
# amora-data-build-tool.amora.array_repeated_fields(str_arr STRING,int_arr INTEGER,id STRING)
# Column creationDate: Data de inserÃ§Ã£o dos dados
# Column device: Dispositivo de origem dos dados
# Column endDate: Data do fim da medida
# Column event_timestamp: Moment if time of which those features where observed
# Column id: Identificador Ãºnico da medida
# Column sourceName: Origem dos dados
# Column sourceVersion: VersÃ£o da origem de dados
# Column source_name: Source of the metric
# Column startDate: Data do inÃ­cio da medida
# Column type: Tipo da mÃ©trica coletada
# Column unit: Unidade de medida
# Column value: Valor observado
# Column value_avg: Average step count of the hour
# Column value_count: Count of step count samples of the hour
# Column value_sum: Sum of the step counts of the hour
# Table amora-data-build-tool.amora.array_repeated_fields: Example model with array columns
# Table amora-data-build-tool.amora.health: Health data exported by the Apple Health App
# Table amora-data-build-tool.amora.heart_rate: Undocumented! Generated by Amora Data Build Tool ðŸ’š
# Table amora-data-build-tool.amora.heart_rate_agg: Undocumented! Generated by Amora Data Build Tool ðŸ’š
# Table amora-data-build-tool.amora.heart_rate_over100: Undocumented! Generated by Amora Data Build Tool ðŸ’š
# Table amora-data-build-tool.amora.step_count_by_source: Undocumented! Generated by Amora Data Build Tool ðŸ’š
# Table amora-data-build-tool.amora.steps: Health automatically counts your steps, walking, and running distances. This table stores step measurement events
"""

    with patch(
        "amora.providers.openai.openai.Completion.create", return_value=completion
    ) as create, patch(
        "amora.providers.openai.prompt_context", return_value=context
    ) as prompt_context:
        assert sql_translate(question) == SQLPromptAnswer(
            sql="SELECT MAX(value)\nFROM `heart_rate`\nWHERE DATE(creationDate) = CURRENT_DATE()",
            completion_tokens=100,
            prompt_tokens=35,
            total_tokens=135,
            request_params={
                "model": "code-davinci-002",
                "temperature": 0,
                "max_tokens": 150,
                "top_p": 1.0,
                "frequency_penalty": 0.0,
                "presence_penalty": 0.0,
                "stop": ["#"],
                "prompt": f""" 
            ### BigQuery SQL tables, with their properties:
            {context}
            ### A query to answer '{question}'
            SELECT
        """,
            },
            response_ms=100,
        )

        create.assert_called_once()
        prompt_context.assert_called_once()
